// automatically generated by the FlatBuffers compiler, do not modify

package dev.north.fortyone.besu.replication.fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ReplicationEvent extends Table {
  public static ReplicationEvent getRootAsReplicationEvent(ByteBuffer _bb) { return getRootAsReplicationEvent(_bb, new ReplicationEvent()); }
  public static ReplicationEvent getRootAsReplicationEvent(ByteBuffer _bb, ReplicationEvent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ReplicationEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String factoryName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer factoryNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer factoryNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte segmentId(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int segmentIdLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer segmentIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer segmentIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public Transaction transaction() { return transaction(new Transaction()); }
  public Transaction transaction(Transaction obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createReplicationEvent(FlatBufferBuilder builder,
      byte type,
      int factoryNameOffset,
      int segmentIdOffset,
      int transactionOffset) {
    builder.startObject(4);
    ReplicationEvent.addTransaction(builder, transactionOffset);
    ReplicationEvent.addSegmentId(builder, segmentIdOffset);
    ReplicationEvent.addFactoryName(builder, factoryNameOffset);
    ReplicationEvent.addType(builder, type);
    return ReplicationEvent.endReplicationEvent(builder);
  }

  public static void startReplicationEvent(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addFactoryName(FlatBufferBuilder builder, int factoryNameOffset) { builder.addOffset(1, factoryNameOffset, 0); }
  public static void addSegmentId(FlatBufferBuilder builder, int segmentIdOffset) { builder.addOffset(2, segmentIdOffset, 0); }
  public static int createSegmentIdVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startSegmentIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTransaction(FlatBufferBuilder builder, int transactionOffset) { builder.addOffset(3, transactionOffset, 0); }
  public static int endReplicationEvent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

